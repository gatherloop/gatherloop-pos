openapi: '3.0.0'
info:
  version: 1.0.0
  title: Swagger Gatherloop POS
  license:
    name: MIT
    url: http://petstore.swagger.io/v1
servers:
  - url: http://petstore.swagger.io/v1
security: []
paths:
  /categories:
    get:
      summary: List all categories
      operationId: categoryList
      tags:
        - category
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create category
      operationId: categoryCreate
      tags:
        - category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}:
    get:
      summary: Get category by id
      operationId: categoryFindById
      tags:
        - category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update category by id
      operationId: categoryUpdateById
      tags:
        - category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete category by id
      operationId: categoryDeleteById
      tags:
        - category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /materials:
    get:
      summary: List all materials
      operationId: materialList
      tags:
        - material
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Material'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create material
      operationId: materialCreate
      tags:
        - material
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /materials/{materialId}:
    get:
      summary: Get material by id
      operationId: materialFindById
      tags:
        - material
      parameters:
        - name: materialId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Material'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update material by id
      operationId: materialUpdateById
      tags:
        - material
      parameters:
        - name: materialId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete material by id
      operationId: materialDeleteById
      tags:
        - material
      parameters:
        - name: materialId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wallets:
    get:
      summary: List all wallets
      operationId: walletList
      tags:
        - wallet
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wallet'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create wallet
      operationId: walletCreate
      tags:
        - wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wallets/{walletId}:
    get:
      summary: Get wallet by id
      operationId: walletFindById
      tags:
        - wallet
      parameters:
        - name: walletId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Wallet'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update wallet by id
      operationId: walletUpdateById
      tags:
        - wallet
      parameters:
        - name: walletId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete wallet by id
      operationId: walletDeleteById
      tags:
        - wallet
      parameters:
        - name: walletId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wallets/{walletId}/transfers:
    get:
      summary: List all wallet transfers
      operationId: walletTransferList
      tags:
        - wallet
      parameters:
        - name: walletId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WalletTransfer'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create wallet transfer
      operationId: walletTransferCreate
      tags:
        - wallet
      parameters:
        - name: walletId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransferRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: List all products
      operationId: productList
      tags:
        - product
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create product
      operationId: productCreate
      tags:
        - product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get product by id
      operationId: productFindById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update product by id
      operationId: productUpdateById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete product by id
      operationId: productDeleteById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /budgets:
    get:
      summary: List all budgets
      operationId: budgetList
      tags:
        - budget
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Budget'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create budget
      operationId: budgetCreate
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /budgets/{budgetId}:
    get:
      summary: Get budget by id
      operationId: budgetFindById
      tags:
        - budget
      parameters:
        - name: budgetId
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Budget'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update budget by id
      operationId: budgetUpdateById
      tags:
        - budget
      parameters:
        - name: budgetId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetRequest'
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete budget by id
      operationId: budgetDeleteById
      tags:
        - budget
      parameters:
        - name: budgetId
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: not found error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        deletedAt:
          type: string
          format: date-time
    CategoryRequest:
      required:
        - name
      properties:
        name:
          type: string
    Material:
      type: object
      required:
        - id
        - name
        - price
        - unit
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
        unit:
          type: string
        deletedAt:
          type: string
          format: date-time
    MaterialRequest:
      type: object
      required:
        - name
        - price
        - unit
      properties:
        name:
          type: string
        price:
          type: integer
          format: int64
        unit:
          type: string
    Wallet:
      type: object
      required:
        - id
        - name
        - balance
        - paymentCostPercentage
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        balance:
          type: integer
          format: int64
        paymentCostPercentage:
          type: number
          format: float
        deletedAt:
          type: string
          format: date-time
    WalletRequest:
      type: object
      required:
        - name
        - balance
        - paymentCostPercentage
      properties:
        name:
          type: string
        balance:
          type: integer
          format: int64
        paymentCostPercentage:
          type: number
          format: float
    WalletTransfer:
      type: object
      required:
        - id
        - createdAt
        - amount
        - fromWalletId
        - fromWallet
        - toWalletId
        - toWallet
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        amount:
          type: integer
          format: int64
        fromWalletId:
          type: integer
          format: int64
        fromWallet:
          $ref: '#/components/schemas/Wallet'
        toWalletId:
          type: integer
          format: int64
        toWallet:
          $ref: '#/components/schemas/Wallet'
        deletedAt:
          type: string
          format: date-time
    WalletTransferRequest:
      type: object
      required:
        - amount
        - toWalletId
      properties:
        amount:
          type: integer
          format: int64
        toWalletId:
          type: integer
          format: int64
    Product:
      type: object
      required:
        - id
        - categoryId
        - name
        - price
      properties:
        id:
          type: integer
          format: int64
        categoryId:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        deletedAt:
          type: string
          format: date-time
    ProductRequest:
      type: object
      required:
        - categoryId
        - name
        - price
      properties:
        categoryId:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
    Budget:
      type: object
      required:
        - id
        - name
        - percentage
        - balance
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        percentage:
          type: integer
          format: int64
        balance:
          type: integer
          format: int64
        deletedAt:
          type: string
          format: date-time
    BudgetRequest:
      type: object
      required:
        - name
        - percentage
        - balance
      properties:
        name:
          type: string
        percentage:
          type: integer
          format: int64
        balance:
          type: integer
          format: int64
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          type: string
    ErrorCode:
      type: string
      enum:
        - server_error
        - validation_error
        - data_not_found
    SuccessResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
